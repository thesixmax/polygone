% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/polyg_nearest_node.R
\name{polyg_nearest_node}
\alias{polyg_nearest_node}
\title{Shortest linestring connections from an \code{sf} POINT object to nodes of a \code{sf} LINESTRING object}
\usage{
polyg_nearest_node(
  points_input,
  lines_input,
  buffer = NULL,
  parallel = FALSE,
  verbose = FALSE
)
}
\arguments{
\item{points_input}{object of class sf, sfc or sfg with geometry type POINT or MULTIPOINT.}

\item{lines_input}{object of class sf, sfc or sfg with geometry type LINESTRING or MULTILINESTRING.}

\item{buffer}{numeric; maximum distance from point to compute distance to nodes.
Default is NULL, i.e. the distance to all nodes in the linestring object are computed.}

\item{parallel}{logical; should the computation be in parallel? Default is \code{FALSE}.
Computation in parallel requires installation of \code{future.apply} and setting a \code{plan()}.}

\item{verbose}{logical; should computing time be printed? Default is \code{FALSE}.}
}
\value{
An \code{sf} object of type LINESTRING containing the minimum distance linestring
connections from each point in \code{points_input} to nodes in \code{lines_input}.
}
\description{
Compute the minimum distance linestring connection from an \code{sf} POINT object to nodes of an \code{sf} LINESTRING object
}
\details{
For each point, the function computes the minimum distance to the nodes of a set of
linestrings and outputs the minimum distance linestring. If the point already intersects
with an existing node, that particular node is disregarded in the computation.
This guarantees linestrings to have length > 0. If \code{points_input} or \code{lines_input} contain
geometries of type MULTIPOINT or MULTILINESTRING, they are converted to POINT and LINESTRING before computing.
}
